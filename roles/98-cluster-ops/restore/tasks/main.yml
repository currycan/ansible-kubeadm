---
- name: 停止运行 kubelet
  ansible.builtin.systemd:
    name: kubelet
    daemon_reload: true
    state: stopped
    enabled: true
  failed_when: false

- name: 读取本地 etcd 备份文件
  ansible.builtin.find:
    paths: "{{ etcd_data_bak_dir }}"
    patterns: "*.db"
  register: etcd_back_dirs
  delegate_to: localhost

- name: 校验 etcd 备份文件是否存在
  ansible.builtin.assert:
    that: etcd_back_dirs.files | length >= 1
    msg: "未获取到节点：{{ inventory_hostname }} 的任何备份文件, 请检查目录：{{ etcd_data_bak_dir }} 中是否有该节点备份文件。"

- name: 获取最新 etcd 备份文件
  ansible.builtin.set_fact:
    etcd_latest_back_dir: "{{ etcd_back_dirs.files | sort(attribute='ctime', reverse=true) | first }}"

- name: 清理相关目录
  ansible.builtin.file:
    name: "{{ item }}"
    state: absent
  with_items:
  - "{{ etcd_data_dir }}"

- name: 创建 etcd 迁移相关目录
  ansible.builtin.file:
    name: "{{ kubernetes_etc_dir }}/backup-etcd/"
    state: directory
    mode: 0644

- name: 分发备份文件到各节点
  ansible.builtin.copy:
    src: "{{ etcd_restore_data | default(etcd_latest_back_dir.path) }}"
    dest: "{{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db"
    mode: 0644

- name: 恢复 etcd 数据
  changed_when: true
  ansible.builtin.shell: >
    etcdctl snapshot restore {{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db \
      --name={{ hostvars[inventory_hostname].ansible_hostname | lower }} \
      --initial-cluster-token=etcd-cluster-token \
      --initial-cluster={% for host in (groups['kube_masters'] | difference(groups['delete_masters']) | unique) %}{{ hostvars[host].ansible_hostname | lower }}=https://{{ hostvars[host]['ansible_' + iface].ipv4.address }}:2380{% if not loop.last %},{% endif %}{% endfor %} \
      --initial-advertise-peer-urls=https://{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}:2380 \
      --data-dir={{ etcd_data_dir }}

- name: 启动 kubelet
  ansible.builtin.systemd:
    name: "{{ item }}"
    daemon_reload: true
    state: restarted
    enabled: true
  with_items:
  - kubelet

- name: 等待 kubelet 件启动
  ansible.builtin.wait_for:
    host: "127.0.0.1"
    port: "{{ item }}"
    delay: 5
    connect_timeout: 60
    timeout: 300
  with_items:
  - "10250"

- name: 检查 {{ inventory_hostname }} etcd 节点是否恢复成功
  changed_when: true
  ansible.builtin.shell: >-
    set -o pipefail;
    etcdctl member list
  environment:
    ETCDCTL_CERT: "{{ etcd_pki_dir }}/healthcheck-client.crt"
    ETCDCTL_KEY: "{{ etcd_pki_dir }}/healthcheck-client.key"
    ETCDCTL_CACERT: "{{ etcd_pki_dir }}/ca.crt"
    ETCDCTL_ENDPOINTS: "{% for host in (groups['kube_masters'] | difference(groups['delete_masters']) | unique) %}https://{{  hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
    ETCDCTL_API: 3
  args:
    executable: /bin/bash
  register: restore_rslt
  until: restore_rslt.rc == 0
  retries: 9
  delay: 10

- name: 移除各节点临时 etcd 备份文件
  ansible.builtin.file:
    name: "{{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db"
    state: absent
