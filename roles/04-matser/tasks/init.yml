- name: 检查第一个 master 节点是否已经正常拉起
  shell: >
    cs_running_num=0;
    for cs in {kube-apiserver,kube-controller-manager,kube-scheduler,etcd};
    do
      {% if container_runtime == 'docker' -%}
      [ `docker ps --filter name=k8s_${cs}.* --filter status=running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
      {% elif container_runtime == 'containerd' -%}
      [ `crictl ps --name=${cs}.* --state running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
      {%- endif -%}
    done;
    if [ $cs_running_num -eq 4 ];then
      echo true;
    else
      echo false;
    fi
  register: first_master_already_running

- block:
  - name: 第一个 master 节点渲染 kubeadm 的配置文件
    template:
      src: "kubeadm-controlplane-init.yaml.j2"
      dest: "{{ kubernetes_etc_dir }}/kubeadm-config.yaml"
      owner: "root"
      group: "root"
      mode: 0644

  - name: 第一个 master 节点手动生成 {{ certs_expired }} 过期时间证书
    shell: >
      mkdir -p {{ etcd_pki_dir }};
      openssl req -x509 -sha256 -newkey rsa:2048 \
        -keyout {{ kubernetes_ca_key }} \
        -out {{ kubernetes_ca }} \
        -days {{ certs_expired }} \
        -nodes -subj '/CN=kubernetes-ca';
      openssl req -x509 -sha256 -newkey rsa:2048 \
        -keyout {{ front_ca_key }} \
        -out {{ front_ca }} \
        -days {{ certs_expired }} \
        -nodes -subj '/CN=kubernetes-front-proxy-ca';
      openssl req -x509 -sha256 -newkey rsa:2048 \
        -keyout {{ etcd_ca_key }} \
        -out {{ etcd_ca }} \
        -days {{ certs_expired }} \
        -nodes -subj '/CN=etcd-ca';

  - name: 添加 kube-apiserver 临时域名解析
    when: lb_mode == "slb"
    blockinfile:
      path: /etc/hosts
      block: |-
        {{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }} {{ kube_master_external_domain.split(',')[0] }}
      mode: 0644
      state: present
      create: yes
      backup: yes
      marker: "# Ansible kube-apiserver temporary domain {mark}"

  # - pause:
  #     prompt: "暂停, 手动确认继续执行, 测试用。。。"

  # kubeadm init --pod-network-cidr="172.30.0.0/16" --kubernetes-version=v1.18.6 --image-repository=registry.aliyuncs.com/k8sxio --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --dry-run
  - debug: msg="初始化第一个 master 节点, 可能需要一定时间。。"
  - name: 初始化第一个 master 节点
    shell: >
      systemctl stop kubelet.service;
      rm -f {{ kubelet_data_dir }}/cpu_manager_state;
      rm -f {{ kubelet_data_dir }}/memory_manager_state;
      rm -f {{ manifest_dir }}/kube-*;
      rm -f {{ manifest_dir }}/etcd.yaml;
      timeout -k 10s 5m kubeadm init \
        {% if skip_kube_proxy | bool -%}
        --skip-phases=addon/kube-proxy \
        {% endif -%}
        {% if skip_coredns | bool -%}
        --skip-phases=addon/coredns \
        {% endif -%}
        --ignore-preflight-errors=ImagePull \
        --config={{ kubernetes_etc_dir }}/kubeadm-config.yaml --upload-certs --v=5
    register: init_first_master_rslt
    # until: init_first_master_rslt.rc == 0
    # retries: 3
    # delay: "{{ retry_stagger | random + 2 }}"
    ignore_errors: true

  - debug:
      var: init_first_master_rslt.stdout_lines

  - name: 校验初始化第一个 master 节点是否成功
    assert:
      that: init_first_master_rslt is succeeded
      msg: "节点：{{ inventory_hostname }} kubeadm int 失败"

  - include_tasks: check_master_status.yml

  - name: 删除 kube-apiserver 临时域名解析
    when: lb_mode == "slb"
    lineinfile :
      path: /etc/hosts
      state: absent
      regexp: "{{ item }}"
    with_items:
      - "{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }} {{ kube_master_external_domain.split(',')[0] }}"
      - "temporary"
      - "^\n"

  - name: 确认 kube-vip 启动完成, 虚拟 IP 创建成功
    when: lb_mode == "kube-vip"
    # kubectl get po -n kube-system | grep kube-vip | cut -d' ' -f1 | xargs kubectl delete po -n kube-system;
    # systemctl restart kubelet;
    shell: >
      nc -z -w 3 {{ lb_apiserver_ip | trim }} 6443;
    register: lb_status
    until: lb_status.rc == 0
    retries: 8
    delay: 15

  - name: 授权 kubelet 自动轮换服务端证书、集群管理用户和安装集群基础依赖组件(如:coreDns、kube-proxy等)
    shell: >
      kubectl apply -R -f "{{ kubernetes_etc_dir }}/{{ item }}"
    environment:
      KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    with_items:
    - csr
    - user
    - addons

  # - name: 判断 kubelet bootstrappers kubeconfig 文件是否存在
  #   stat:
  #     path: "{{ item.path }}"
  #   with_items: "{{ kube_config.contexts }}"
  #   register: check_kubeconfig_files

  # - name: 创建 kubelet bootstrappers kubeconfig 文件
  #   when: not item.stat.exists
  #   include_tasks: "kubeconfig.yml"
  #   with_items: "{{ check_kubeconfig_files['results'] }}"
  when: not first_master_already_running.stdout | bool
