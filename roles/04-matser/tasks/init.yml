- name: 获取第一个 master 节点各组件状态
  when: inventory_hostname == groups['kube_masters'] | difference(groups['delete_masters']) | unique | first
  shell: >
    cs_running_num=0;
    for cs in {kube-apiserver,kube-controller-manager,kube-scheduler};
    do
      {% if container_runtime == 'docker' -%}
      [ `docker ps --filter name=k8s_${cs}.* --filter status=running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
      {% elif container_runtime == 'containerd' -%}
      [ `crictl ps --name=${cs}.* --state running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
      {%- endif -%}
    done;
    echo $cs_running_num
  register: cs_status_result

- block:
  - name: 第一个 master 节点渲染 kubeadm 的配置文件
    template:
      src: "kubeadm-controlplane-init.yaml.j2"
      dest: "{{ kubernetes_etc_dir }}/kubeadm-config.yaml"
      owner: "root"
      group: "root"
      mode: 0644

  # - pause:
  #     prompt: "暂停, 手动确认继续执行, 测试用。。。"

  # kubeadm init --pod-network-cidr="172.30.0.0/16" --kubernetes-version=v1.18.6 --image-repository=registry.aliyuncs.com/k8sxio --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --dry-run
  - debug: msg="初始化第一个 master 节点, 可能需要一定时间。。"
  - name: 初始化第一个 master 节点
    shell: >
      timeout -k 240s 240s;
      systemctl stop kubelet.service;
      rm -f {{ kubelet_data_dir }}/cpu_manager_state;
      rm -f {{ kubelet_data_dir }}/memory_manager_state;
      rm -f {{ manifest_dir }}/kube-*;
      kubeadm init \
        {% if skip_kube_proxy | bool -%}
        --skip-phases=addon/kube-proxy \
        {% endif -%}
        {% if skip_coredns | bool -%}
        --skip-phases=addon/coredns \
        {% endif -%}
        --ignore-preflight-errors=ImagePull \
        --config={{ kubernetes_etc_dir }}/kubeadm-config.yaml --upload-certs --v=5
    register: init_rslt
    # until: init_rslt.rc == 0
    # retries: 3
    # delay: "{{ retry_stagger | random + 2 }}"

  - include_tasks: check_master_status.yml

  - name: 确认 kube-vip 启动完成, 虚拟 IP 创建成功
    when: lb_mode == "kube-vip"
    # kubectl get po -n kube-system | grep kube-vip | cut -d' ' -f1 | xargs kubectl delete po -n kube-system;
    # systemctl restart kubelet;
    shell: >
      nc -z -w 3 {{ lb_apiserver_ip | trim }} 6443;
    register: lb_status
    until: lb_status.rc == 0
    retries: 8
    delay: 15
  when: 'cs_status_result.stdout is defined and cs_status_result.stdout != "3"'
  run_once: true
  delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"
