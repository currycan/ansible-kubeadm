---
- name: 创建 docker 用户组
  ansible.builtin.group:
    name: docker
    state: present

- name: 创建 docker 用户
  ansible.builtin.user:
    name: docker
    comment: "Docker user"
    shell: /sbin/nologin
    state: present
    system: true
    groups: docker

- name: 创建 docker 配置文件目录
  ansible.builtin.file:
    path: "{{ docker_etc_dir }}"
    state: directory
    mode: 0644

- name: 配置 limit-docker.slice
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: "limit-docker.slice", dest: "{{ systemd_service_dir }}", mode: "0644" }
    # 私有仓库自签证书认证
    # - { src: "certs.d", dest: "{{ docker_etc_dir }}", mode: "0644" }

- name: 判断是否为 GPU 节点
  ansible.builtin.stat:
    path: "/usr/bin/nvidia-smi"
  register: check_gpu_node

- name: 安装 nvidia-docker
  when: check_gpu_node.stat.exists
  block:
    - name: 配置 nvidia-docker.repo
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "nvidia-docker.repo", dest: "/etc/yum.repos.d/", mode: "0644" }

    - name: 安装 nvidia-container-runtime
      ansible.builtin.package:
        name:
          - nvidia-container-runtime

- name: 获取 GPU 节点
  when: check_gpu_node.stat.exists
  ansible.builtin.set_fact:
    gpu_node: true

- name: 配置 Docker engine
  ansible.builtin.template:
    src: "docker/{{ item.src }}.j2"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: "docker.service", dest: "{{ systemd_service_dir }}/docker.service" }
    - { src: "docker.socket", dest: "{{ systemd_service_dir }}/docker.socket" }
    - { src: "daemon.json", dest: "{{ docker_etc_dir }}/daemon.json" }

- name: 自动补全 docker 命令
  changed_when: true
  ansible.builtin.shell: >
    source /etc/bash_completion.d/docker
  args:
    executable: /bin/bash

- name: Flush-iptables
  changed_when: true
  ansible.builtin.shell: >
    iptables -P INPUT ACCEPT;
    iptables -F && iptables -X;
    iptables -F -t nat && iptables -X -t nat;
    iptables -F -t raw && iptables -X -t raw;
    iptables -F -t mangle && iptables -X -t mangle;
    iptables -P FORWARD ACCEPT

- name: 启动 Docker socket
  ansible.builtin.systemd:
    name: docker.socket
    daemon_reload: true
    state: started
    enabled: true

- name: 启动 Docker engine, 并设置开机启动
  ansible.builtin.systemd:
    name: docker
    daemon_reload: true
    state: restarted
    enabled: true
  register: started_docker
  until: started_docker.status.ActiveState == "active"
  retries: 3
  delay: "{{ retry_stagger }}"

- name: 判断执行用户是否存在
  changed_when: true
  failed_when: false
  ansible.builtin.shell: >-
    set -o pipefail;
    /usr/bin/getent passwd {{ item }} | grep {{ item }} | cut -d":" -f6
  register: user_results
  with_items:
    - "{{ normal_user }}"

# 非 root 用户添加 docker 执行权限
- name: 创建 docker group
  when: item.rc == 0
  ansible.builtin.group:
    name: "docker"
    state: present
  with_items:
    - "{{ user_results['results'] }}"

- name: 添加非 root 用户 docker 命令权限
  when: item.rc == 0
  ansible.builtin.user:
    name: "{{ item }}"
    append: true
    groups: docker
    state: absent
  with_items:
    - "{{ user_results['results'] }}"
